#  Copyright (C) 2016-2020, Antony Polukhin.
#
# Use, modification and distribution is subject to the Boost Software License,
# Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
# http://www.boost.org/LICENSE_1_0.txt)
#

import testing ;
import ../../config/checks/config : requires ;

project
    : source-location .
    : requirements
        <toolset>msvc:<cxxflags>"/std:c++latest"
        <toolset>msvc:<define>BOOST_PFR_USE_CPP17=1
        <define>BOOST_PFR_DETAIL_STRICT_RVALUE_TESTING=1
        [ requires cxx14_constexpr ]
    ;

local DISABLE_ON_MSVC = <toolset>msvc:<build>no ;
local DISABLE_ON_CLANG8_PLUS = <toolset>clang-8:<build>no <toolset>clang-9:<build>no <toolset>clang-10:<build>no ;

local STRUCTURED_BINDING_ENGINE = <define>BOOST_PFR_USE_LOOPHOLE=0 <define>BOOST_PFR_USE_CPP17=1 [ requires cxx17_structured_bindings ] ;
local LOOPHOLE_ENGINE = <define>BOOST_PFR_USE_LOOPHOLE=1 <define>BOOST_PFR_USE_CPP17=0 $(DISABLE_ON_MSVC) $(DISABLE_ON_CLANG8_PLUS) ;
local CLASSIC_ENGINE = <define>BOOST_PFR_USE_LOOPHOLE=0 <define>BOOST_PFR_USE_CPP17=0 $(DISABLE_ON_MSVC) ;

test-suite pfr_tests
  :
    [ run offset_based_getter.cpp ]

    [ run test_tuple_sizes_on.cpp : : : <define>BOOST_PFR_RUN_TEST_ON=char : test_tuple_sizes_on_chars ]
    [ run test_tuple_sizes_on.cpp : : : <define>BOOST_PFR_RUN_TEST_ON=int : test_tuple_sizes_on_ints ]
    [ run test_tuple_sizes_on.cpp : : : <define>BOOST_PFR_RUN_TEST_ON=short : test_tuple_sizes_on_shorts ]
    [ run test_tuple_sizes_on.cpp : : : <define>BOOST_PFR_RUN_TEST_ON=void* : test_tuple_sizes_on_voidptrs ]
    [ run test_tuple_sizes_on.cpp : : : <define>BOOST_PFR_RUN_TEST_ON="std::size_t" : test_tuple_sizes_on_size_ts ]

    [ run run/motivating_example.cpp      : : : : auto_engine_motivating ]
    [ run ../example/sample_printing.cpp     : : : : auto_engine_sample_printing ]
    [ run ../example/get.cpp                 : : : : auto_engine_get ]
    [ run ../example/quick_examples.cpp      : : : : auto_engine_quick ]
    
    # TODO: template_unconstrained.cpp does not work at all
    #[ run template_unconstrained.cpp : : : $(STRUCTURED_BINDING_ENGINE) : template_unconstrained_sb ]
    #[ run template_unconstrained.cpp : : : $(LOOPHOLE_ENGINE) : template_unconstrained_lh ]
    #[ compile-fail template_unconstrained.cpp : $(CLASSIC_ENGINE) : template_unconstrained_classic ]
  ;

local BLACKLIST_TESTS_FOR_LOOPHOLE =
    get_const_field                     # boost::pfr::get gives compile time error on const fields
    template_constructor                # Template constructor in one of the fields of the aggregate
    tie_anonymous_const_field           # boost::pfr::structure_tie gives compile time error on const fields
  ;

# Those tests are either 
# * reflecting a non literal type
# * or calling boost::pfr::get and the result is a user defined structure
local BLACKLIST_TESTS_FOR_CLASSIC =
    get_const_field
    get_non_default_constructible
    get_rvalue
    issue30
    issue33
    motivating_example0
    motivating_example2
    optional_like
    read_write_non_literal
    template_constructor
    tie_anonymous
    tie_anonymous_const_field
  ;

for local source_file in [ glob ./run/*.cpp ] [ glob ../example/*.cpp ]
{
    local target_name = $(source_file[1]:B) ;
    pfr_tests += [ run $(source_file) : : : $(STRUCTURED_BINDING_ENGINE) : $(target_name)_sb ] ;
    
    if ! $(target_name) in $(BLACKLIST_TESTS_FOR_LOOPHOLE)
    {
        pfr_tests += [ run $(source_file) : : : $(LOOPHOLE_ENGINE) : $(target_name)_lh ] ;
    }
    else
    {
        pfr_tests += [ compile-fail $(source_file) : $(LOOPHOLE_ENGINE) : $(target_name)_lh ] ;
    }

    if ! $(target_name) in $(BLACKLIST_TESTS_FOR_CLASSIC)
    {
        pfr_tests += [ run $(source_file) : : : $(CLASSIC_ENGINE) : $(target_name)_classic ] ;
    }
    else
    {
        pfr_tests += [ compile-fail $(source_file) : $(CLASSIC_ENGINE) : $(target_name)_classic ] ;
    }
}

for local source_file in [ glob ./compile-fail/*.cpp ]
{
    local target_name = $(source_file[1]:B) ;
    pfr_tests += [ compile-fail $(source_file) : $(STRUCTURED_BINDING_ENGINE) : $(target_name)_sb ] ;
    pfr_tests += [ compile-fail $(source_file) : $(LOOPHOLE_ENGINE) : $(target_name)_lh ] ;
    pfr_tests += [ compile-fail $(source_file) : $(CLASSIC_ENGINE) : $(target_name)_classic ] ;
}
